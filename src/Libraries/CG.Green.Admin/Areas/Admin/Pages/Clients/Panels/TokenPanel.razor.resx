<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbsoluteRefreshTokenLifetime" xml:space="preserve">
    <value>Absolute Refresh Token Lifetime</value>
  </data>
  <data name="AbsoluteRefreshTokenLifetimeHelp" xml:space="preserve">
    <value>Absolute lifetime of a refresh token in seconds.</value>
  </data>
  <data name="AccessTokenLifetime" xml:space="preserve">
    <value>Access Token Lifetime</value>
  </data>
  <data name="AccessTokenLifetimeHelp" xml:space="preserve">
    <value>Lifetime of an access token in seconds.</value>
  </data>
  <data name="AccessTokens" xml:space="preserve">
    <value>Access Tokens</value>
  </data>
  <data name="AccessTokenType" xml:space="preserve">
    <value>Access Token Type</value>
  </data>
  <data name="AccessTokenTypeHelp" xml:space="preserve">
    <value>Specifies whether the access token is a reference token or a self contained JWT token.</value>
  </data>
  <data name="AllowAccessTokensViaBrowser" xml:space="preserve">
    <value>Allow access tokens via browser</value>
  </data>
  <data name="AllowAccessTokensViaBrowserHelp" xml:space="preserve">
    <value>Controls whether access tokens are transmitted via the browser, for this client.</value>
  </data>
  <data name="AllowedSigningAlgorithms" xml:space="preserve">
    <value>Allowed Signing Algorithms</value>
  </data>
  <data name="AllowedSigningAlgorithmsHelp" xml:space="preserve">
    <value>Signing algorithm for identity token. If empty, will use the Duende default signing algorithm</value>
  </data>
  <data name="AllowOfflineAccess" xml:space="preserve">
    <value>Allow Offline Access</value>
  </data>
  <data name="AllowOfflineAccessHelp" xml:space="preserve">
    <value>Enable/disable refresh tokens.</value>
  </data>
  <data name="AlwaysIncludeUserClaimsInIdentityToken" xml:space="preserve">
    <value>Always include user claims in identity token</value>
  </data>
  <data name="AlwaysIncludeUserClaimsInIdentityTokenHelp" xml:space="preserve">
    <value>When requesting both an id token and access token, should the user claims always be added to the id token instead of requiring the client to use the userinfo endpoint.</value>
  </data>
  <data name="Broke" xml:space="preserve">
    <value>Something broke!</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="CreateSigningAlgorithm" xml:space="preserve">
    <value>Create Signing Algorithm</value>
  </data>
  <data name="EditSigningAlgorithm" xml:space="preserve">
    <value>Edit Signing Algorithm</value>
  </data>
  <data name="IdentityTokenLifetime" xml:space="preserve">
    <value>Identity Token Lifetime</value>
  </data>
  <data name="IdentityTokenLifetimeHelp" xml:space="preserve">
    <value>Lifetime of an identity token in seconds.</value>
  </data>
  <data name="IdentityTokens" xml:space="preserve">
    <value>Identity Tokens</value>
  </data>
  <data name="LoadingSigningAlgorithms" xml:space="preserve">
    <value>Loading signing algorithms ...</value>
  </data>
  <data name="NoSigningAlgorithms" xml:space="preserve">
    <value>No signing algorithms were found.</value>
  </data>
  <data name="RefreshTokenExpiration" xml:space="preserve">
    <value>Refresh Token Expiration</value>
  </data>
  <data name="RefreshTokenExpirationHelp" xml:space="preserve">
    <value>Absolute: the refresh token will expire on a fixed point in time. Sliding: when refreshing the token, the lifetime of the refresh token will be renewed.</value>
  </data>
  <data name="RefreshTokens" xml:space="preserve">
    <value>Refresh Tokens</value>
  </data>
  <data name="RefreshTokenUsage" xml:space="preserve">
    <value>Refresh Token Usage</value>
  </data>
  <data name="RefreshTokenUsageHelp" xml:space="preserve">
    <value>ReUse: the refresh token handle will stay the same when refreshing tokens. OneTime: the refresh token handle will be updated when refreshing tokens.</value>
  </data>
  <data name="RowsPerPage" xml:space="preserve">
    <value>Rows per page:</value>
  </data>
  <data name="SlidingRefreshTokenLifetime" xml:space="preserve">
    <value>Sliding Refresh Token Lifetime</value>
  </data>
  <data name="SlidingRefreshTokenLifetimeHelp" xml:space="preserve">
    <value>Sliding lifetime of a refresh token in seconds.</value>
  </data>
  <data name="UpdateAccessTokenClaimsOnRefresh" xml:space="preserve">
    <value>Update access token claims on refresh</value>
  </data>
  <data name="UpdateAccessTokenClaimsOnRefreshHelp" xml:space="preserve">
    <value>Controls whether the access token (and its claims) should be updated on a refresh token request</value>
  </data>
</root>